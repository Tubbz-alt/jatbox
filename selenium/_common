#!/usr/bin/env bash

function _launch-selenium-server(){
    DIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) # The directory in which this script file is stored

    JAVA_ARGS=$1
    SELENIUM_ARGS=$2

    COMMAND_TO_EXECUTE="java ${JAVA_ARGS} -jar ${DIR}/selenium-server-standalone-3.0.1.jar ${SELENIUM_ARGS} > selenium_server.log 2>&1 &"
    echo "Launching Selenium Server: ${COMMAND_TO_EXECUTE}"
    eval ${COMMAND_TO_EXECUTE}
}

function _assert-selenium-server-not-running(){
    # SEL_JOB_COUNT will be 1 if Selenium Server is already running on this machine
    SEL_JOB_COUNT="$(ps -f | grep java.*jar.*selenium-server.* | grep -v grep | wc -l)"

    if [ ! ${SEL_JOB_COUNT} -eq "0" ]; then
        echo "Error: Selenium server is already running on this machine."
        return 1
    fi
}

###
# Start a Selenium Server node instance. A node is registered to the Hub, and executes in-browser tests.
###
function launch-selenium-node(){
    _assert-selenium-server-not-running || return 1;

    SYSTEM=$1 #Must be the name of one of the subdirectories of selenium/driver; specifies the type of system for a node

    # browser flag arguments to be passed to the selenium server. E.G. "-browser browserName=safari -browser browserName=opera"
    # to register a node that can run tests in either Safari or Opera.
    BROWSERS=$2

    HUB_IP=192.168.33.11 # This should be the same as the IP address configured in the private_network configuration line of Vagrantfile
    HUB_PORT=4444 # 4444 is the default port for the server to listen on and shouldn't need to be changed

    DRIVER_PATH=${DIR}/driver/${SYSTEM} # The directory in which browser driver executables are stored (used when launching a node instance)
    if [ ! -d "${DRIVER_PATH}" ]; then
        echo "${SYSTEM} is not a valid system - path ${DRIVER_PATH} does not exist"
    fi

    DRIVERS="-Dwebdriver.gecko.driver=${DRIVER_PATH}/geckodriver.exe -Dwebdriver.chrome.driver=${DRIVER_PATH}/chromedriver.exe "

    _launch-selenium-server "${DRIVERS}" "-role node -hubHost ${HUB_IP} -hubPort ${HUB_PORT} $BROWSERS"
}

###
# Start a Selenium Server hub instance. A hub registers nodes, and dispatches tests to them for execution.
###
function launch-selenium-hub(){
    _assert-selenium-server-not-running || return 1;
    _launch-selenium-server "" "-role hub"
}

